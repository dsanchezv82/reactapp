import { useEffect, useRef, useState } from 'react';
import {
  ActivityIndicator,
  Dimensions,
  StyleSheet,
  TouchableOpacity,
  View
} from 'react-native';
import { WebView } from 'react-native-webview';
import ThemedText from '../components/ThemedText';
import ThemedView from '../components/ThemedView';
import { useAuth } from '../contexts/AuthContext';
import { useTheme } from '../contexts/ThemeContext';

const API_BASE_URL = 'https://api.garditech.com/api';
const { width, height } = Dimensions.get('window');

interface LiveStreamResponse {
  address: string;
  mediaToken: string;
  surfsightJwt?: string; // Optional for now, required for live streaming
}

export default function LiveScreen({ navigation }: any) {
  const { user, authToken } = useAuth();
  const { theme } = useTheme();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string>('');
  const [streamUrl, setStreamUrl] = useState<string>('');
  const [mediaToken, setMediaToken] = useState<string>('');
  const [retryCount, setRetryCount] = useState(0);
  const [webViewUrl, setWebViewUrl] = useState<string>('');
  const [htmlContent, setHtmlContent] = useState<string>('');
  const isFetchingRef = useRef(false);
  const refreshTimerRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    initializeLiveStream();
    
    // Cleanup timer on unmount
    return () => {
      if (refreshTimerRef.current) {
        console.log('üßπ Cleaning up refresh timer on unmount');
        clearTimeout(refreshTimerRef.current);
      }
    };
  }, [user?.imei, authToken]);

  const initializeLiveStream = async () => {
    if (!user?.imei) {
      setError('No device IMEI found. Please register a device first.');
      setLoading(false);
      return;
    }

    if (!authToken) {
      setError('Not authenticated. Please login again.');
      setLoading(false);
      return;
    }

    await fetchLiveStreamUrl();
  };

  const fetchLiveStreamUrl = async () => {
    // Prevent multiple simultaneous calls
    if (isFetchingRef.current) {
      console.log('‚è∏Ô∏è Already fetching, skipping duplicate call');
      return;
    }

    try {
      isFetchingRef.current = true;
      setLoading(true);
      setError('');

      console.log('üì° Requesting live stream for IMEI:', user?.imei);
      console.log('üîë Auth token:', authToken ? 'Present' : 'Missing');
      console.log('üìç API URL:', `${API_BASE_URL}/devices/${user?.imei}/live-stream`);

      const response = await fetch(
        `${API_BASE_URL}/devices/${user?.imei}/live-stream`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${authToken}`,
            'Content-Type': 'application/json',
          },
        }
      );

      console.log('üì° Live stream response status:', response.status);
      console.log('üì° Response headers:', JSON.stringify(Object.fromEntries(response.headers.entries())));

      const responseText = await response.text();
      console.log('üì¶ Raw response:', responseText.substring(0, 500));

      if (!response.ok) {
        let errorData;
        try {
          errorData = JSON.parse(responseText);
        } catch {
          errorData = { error: response.status === 404 ? 'Live stream feature not available yet' : 'Camera Offline' };
        }
        console.log('‚ùå Error response:', errorData);
        throw new Error(errorData.error || errorData.message || `Server error: ${response.status}`);
      }

      const data: LiveStreamResponse = JSON.parse(responseText);
      console.log('‚úÖ Live stream data received:',  JSON.stringify(data, null, 2));
      console.log('üé¨ Stream address:', data.address);
      console.log('üîë Media token length:', data.mediaToken?.length);
      console.log('üîë Surfsight JWT available:', !!data.surfsightJwt);
      
      // Store the values for display
      setStreamUrl(data.address);
      setMediaToken(data.mediaToken);
      
      // Build live stream player
      // If we have the Surfsight JWT, use the official Lytx web component
      // Otherwise, attempt HLS streaming or show instructions
      const streamHtml = data.surfsightJwt ? buildLytxPlayer(data) : buildHlsPlayer(data);
      
      setHtmlContent(streamHtml);
      console.log('üì∫ Stream player initialized');
      
      setLoading(false);
      setRetryCount(0);

      // Set up refresh timer for 2 minutes - clear any existing timer first
      if (refreshTimerRef.current) {
        console.log('üßπ Clearing existing refresh timer');
        clearTimeout(refreshTimerRef.current);
      }
      
      console.log('‚è∞ Setting up stream refresh timer for 2 minutes...');
      refreshTimerRef.current = setTimeout(() => {
        console.log('‚è∞ Auto-refreshing stream token after 2 minutes...');
        fetchLiveStreamUrl();
      }, 2 * 60 * 1000);

    } catch (err: any) {
      console.error('‚ùå Live stream error:', err);
      console.error('‚ùå Error details:', {
        message: err.message,
        name: err.name,
        stack: err.stack
      });
      setError(err.message || 'Camera Offline');
      setLoading(false);
    } finally {
      isFetchingRef.current = false;
    }
  };

  // Build Lytx official web component player (requires Surfsight JWT)
  const buildLytxPlayer = (data: LiveStreamResponse) => {
    return `
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    html, body {
      width: 100%;
      height: 100%;
      overflow: hidden;
      background: #000;
    }
    #player-container {
      width: 100%;
      height: 100%;
      position: relative;
    }
    iframe {
      width: 100%;
      height: 100%;
      border: none;
    }
    video {
      width: 100%;
      height: 100%;
      object-fit: contain;
      background: #000;
    }
    .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background: #000;
      color: white;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      z-index: 10;
    }
    .icon {
      font-size: 64px;
      margin-bottom: 20px;
      animation: pulse 2s infinite;
    }
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    .status {
      font-size: 16px;
      color: #00ACB4;
      margin-top: 10px;
    }
    .info {
      margin-top: 30px;
      padding: 20px;
      background: rgba(255,255,255,0.05);
      border-radius: 12px;
      max-width: 350px;
      font-size: 13px;
      line-height: 1.6;
      color: #ccc;
    }
  </style>
</head>
<body>
  <div id="player-container">
    <div class="loading-overlay" id="loading">
      <div class="icon">üìπ</div>
      <h2>Attempting Live Stream Connection</h2>
      <div class="status">Connecting to media server...</div>
      <div class="info">
        <strong>Stream Details:</strong><br/>
        Device: ${user?.imei}<br/>
        Server: ${data.address}<br/>
        Status: Authenticating
      </div>
    </div>
    
    <video id="video" autoplay playsinline muted controls style="display:none;">
      Your browser doesn't support video playback.
    </video>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
  <script>
    // Surfsight/Lytx streaming configuration
    const config = {
      server: '${data.address}',
      mediaToken: '${data.mediaToken}',
      imei: '${user?.imei}',
      familyId: '${user?.familyId || ''}'
    };
    
    console.log('üé¨ Initializing Surfsight HLS stream:', config);
    
    const video = document.getElementById('video');
    const loading = document.getElementById('loading');
    
    // Try HLS streaming with media token
    // Surfsight uses HLS for their web player
    const hlsUrl = \`https://\${config.server}/hls/\${config.imei}/stream.m3u8?token=\${config.mediaToken}\`;
    
    console.log('üì∫ HLS URL:', hlsUrl);
    
    if (Hls.isSupported()) {
      const hls = new Hls({
        debug: true,
        enableWorker: true,
        lowLatencyMode: true,
        xhrSetup: function(xhr, url) {
          // Add authentication header if needed
          xhr.setRequestHeader('Authorization', 'Bearer ' + config.mediaToken);
        }
      });
      
      hls.loadSource(hlsUrl);
      hls.attachMedia(video);
      
      hls.on(Hls.Events.MANIFEST_PARSED, function() {
        console.log('‚úÖ HLS manifest parsed successfully');
        loading.style.display = 'none';
        video.style.display = 'block';
        video.play().catch(e => {
          console.error('‚ùå Video play error:', e);
          showError('Failed to start video playback. Tap to play manually.');
        });
      });
      
      hls.on(Hls.Events.ERROR, function(event, data) {
        console.error('‚ùå HLS error:', data);
        if (data.fatal) {
          switch(data.type) {
            case Hls.ErrorTypes.NETWORK_ERROR:
              console.error('Network error - trying to recover');
              showError('Network error loading stream. This may require Surfsight JWT token.');
              break;
            case Hls.ErrorTypes.MEDIA_ERROR:
              console.error('Media error - trying to recover');
              hls.recoverMediaError();
              break;
            default:
              console.error('Fatal error - cannot recover');
              showError('Stream connection failed. Surfsight requires JWT authentication token.');
              break;
          }
        }
      });
    } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
      // Native HLS support (iOS Safari)
      video.src = hlsUrl;
      video.addEventListener('loadedmetadata', function() {
        console.log('‚úÖ Native HLS loaded');
        loading.style.display = 'none';
        video.style.display = 'block';
        video.play().catch(e => {
          console.error('‚ùå Video play error:', e);
          showError('Failed to start video playback');
        });
      });
      
      video.addEventListener('error', function(e) {
        console.error('‚ùå Video error:', e);
        showError('Stream connection failed. Missing Surfsight JWT token.');
      });
    } else {
      showError('HLS not supported in this browser');
    }
    
    function showError(message) {
      loading.innerHTML = \`
        <div class="icon">‚ö†Ô∏è</div>
        <h2>Stream Unavailable</h2>
        <div class="status" style="color: #FF6B6B;">\${message}</div>
        <div class="info">
          <strong>Issue:</strong><br/>
          The media server and token are valid, but Surfsight's live streaming 
          requires the Surfsight JWT authentication token.<br/><br/>
          <strong>Solution:</strong><br/>
          The backend API needs to return the Surfsight JWT along with the 
          media server address and token.<br/><br/>
          <strong>Current Data:</strong><br/>
          ‚Ä¢ Device: \${config.imei}<br/>
          ‚Ä¢ Server: \${config.server}<br/>
          ‚Ä¢ Family ID: \${config.familyId}<br/>
          ‚Ä¢ Token: Available ‚úì
        </div>
      \`;
    }
  </script>
</body>
</html>
      `;
      
      setHtmlContent(streamHtml);
      console.log('üì∫ Stream connection established - displaying info');
      
      setLoading(false);
      setRetryCount(0);

      console.log('‚úÖ Stream URL set successfully, WebView should load now');

      // Set up refresh timer for 2 minutes - clear any existing timer first
      if (refreshTimerRef.current) {
        console.log('üßπ Clearing existing refresh timer');
        clearTimeout(refreshTimerRef.current);
      }
      
      console.log('‚è∞ Setting up stream refresh timer for 2 minutes...');
      refreshTimerRef.current = setTimeout(() => {
        console.log('‚è∞ Auto-refreshing stream token after 2 minutes...');
        fetchLiveStreamUrl();
      }, 2 * 60 * 1000);

    } catch (err: any) {
      console.error('‚ùå Live stream error:', err);
      console.error('‚ùå Error details:', {
        message: err.message,
        name: err.name,
        stack: err.stack
      });
      setError(err.message || 'Camera Offline');
      setLoading(false);
    } finally {
      isFetchingRef.current = false;
    }
  };

  const handleRetry = () => {
    setRetryCount(retryCount + 1);
    fetchLiveStreamUrl();
  };

  return (
    <ThemedView style={styles.container}>
      {/* Content */}
      <View style={styles.content}>
        {loading && (
          <View style={styles.centerContent}>
            <ActivityIndicator size="large" color={theme.colors.primary} />
            <ThemedText style={styles.loadingText}>
              Connecting to live stream...
            </ThemedText>
            <ThemedText type="secondary" style={styles.infoText}>
              Device: {user?.imei}
            </ThemedText>
          </View>
        )}

        {error && !loading && (
          <View style={styles.centerContent}>
            <ThemedText style={styles.errorText}>‚ö†Ô∏è {error}</ThemedText>
            <TouchableOpacity
              style={[styles.retryButton, { backgroundColor: theme.colors.primary }]}
              onPress={handleRetry}
            >
              <ThemedText style={styles.retryButtonText}>
                {retryCount > 0 ? 'Try Again' : 'Retry'}
              </ThemedText>
            </TouchableOpacity>
          </View>
        )}

        {streamUrl && !loading && !error && htmlContent && (
          <View style={styles.videoContainer}>
            <WebView
              source={{ html: htmlContent }}
              style={styles.video}
              mediaPlaybackRequiresUserAction={false}
              allowsInlineMediaPlayback={true}
              javaScriptEnabled={true}
              domStorageEnabled={true}
              startInLoadingState={true}
              renderLoading={() => (
                <View style={styles.centerContent}>
                  <ActivityIndicator size="large" color={theme.colors.primary} />
                  <ThemedText style={styles.loadingText}>Loading stream...</ThemedText>
                </View>
              )}
              onLoadStart={() => console.log('üåê WebView load started')}
              onLoadProgress={({ nativeEvent }) => console.log('üìä WebView load progress:', nativeEvent.progress)}
              onLoad={() => {
                console.log('‚úÖ WebView loaded successfully');
                console.log('üì∫ Stream should be visible now');
              }}
              onError={(syntheticEvent) => {
                const { nativeEvent } = syntheticEvent;
                console.error('‚ùå WebView error:', nativeEvent);
                setError(`Failed to load stream: ${nativeEvent.description || 'Unknown error'}`);
              }}
              onHttpError={(syntheticEvent) => {
                const { nativeEvent } = syntheticEvent;
                console.error('‚ùå WebView HTTP error:', nativeEvent.statusCode, nativeEvent.url);
              }}
              onMessage={(event) => {
                console.log('üì¨ Message from WebView:', event.nativeEvent.data);
              }}
            />
            <View style={[styles.streamInfo, { backgroundColor: theme.colors.surface }]}>
              <ThemedText type="secondary" style={styles.streamInfoText}>
                üî¥ Live Stream
              </ThemedText>
            </View>
          </View>
        )}
      </View>

      {/* Footer info */}
      {streamUrl && !loading && (
        <View style={[styles.footer, { backgroundColor: theme.colors.surface }]}>
          <ThemedText type="secondary" style={styles.footerText}>
            Stream will auto-refresh every 2 minutes
          </ThemedText>
        </View>
      )}
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  content: {
    flex: 1,
  },
  centerContent: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 24,
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    textAlign: 'center',
  },
  infoText: {
    marginTop: 8,
    fontSize: 14,
    textAlign: 'center',
  },
  errorText: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 24,
    paddingHorizontal: 24,
  },
  retryButton: {
    paddingVertical: 12,
    paddingHorizontal: 32,
    borderRadius: 8,
    marginBottom: 16,
  },
  retryButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  backButton: {
    paddingVertical: 8,
  },
  videoContainer: {
    flex: 1,
    backgroundColor: '#000000',
  },
  video: {
    flex: 1,
    width: '100%',
    height: '100%',
  },
  streamInfo: {
    position: 'absolute',
    top: 16,
    left: 16,
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
    opacity: 0.9,
  },
  streamInfoText: {
    fontSize: 12,
    fontWeight: '600',
  },
  footer: {
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderTopWidth: 1,
    borderTopColor: '#E5E5EA',
    alignItems: 'center',
  },
  footerText: {
    fontSize: 12,
  },
});
